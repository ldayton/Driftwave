name: WASM

on:
  push:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install ALSA dev (Linux only)
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get update && sudo apt-get install -y libasound2-dev

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Build workspace
      run: cargo build --verbose

    - name: Run tests
      run: cargo test --verbose

    - name: Build release
      run: cargo build --release --verbose

    - name: Package crates
      run: |
        cargo package -p driftwave-core --no-verify
        cargo package -p driftwave-cpal --no-verify
        cargo package -p driftwave-fmod --no-verify
        mkdir -p crate-artifacts
        cp target/package/*.crate crate-artifacts/

    - name: List all artifacts (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        echo "=== Release artifacts ==="
        ls -la target/release/*.{a,so,dylib,rlib} 2>/dev/null || true

    - name: List all artifacts (Windows)
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        echo === Release artifacts ===
        dir target\release\*.lib target\release\*.dll target\release\*.rlib 2>nul || exit /b 0

    - name: Upload library artifacts
      uses: actions/upload-artifact@v4
      with:
        name: libs-${{ matrix.os }}
        path: |
          target/release/libdriftwave_core.*
          target/release/libdriftwave_cpal.*
          target/release/libdriftwave_fmod.*
          target/release/driftwave_core.*
          target/release/driftwave_cpal.*
          target/release/driftwave_fmod.*

    - name: Upload crate packages
      uses: actions/upload-artifact@v4
      with:
        name: crates-${{ matrix.os }}
        path: crate-artifacts/*.crate

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt

    - name: Check formatting
      run: cargo fmt -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy

    - name: Install ALSA dev
      run: sudo apt-get update && sudo apt-get install -y libasound2-dev

    - name: Run clippy
      run: cargo clippy -- -D warnings

  wasm:
    name: WASM Build
    runs-on: ubuntu-24.04

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown

    - name: Install wasm-pack
      run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-wasm-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-wasm-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Build WASM module
      run: |
        cd src-web
        wasm-pack build --release --target web --out-dir ../js/wasm

    - name: Build NPM package
      run: |
        cd js
        npm install
        npm run build

    - name: Create NPM package
      run: |
        cd js
        npm pack
        mv *.tgz ../driftwave-npm.tgz

    - name: Upload NPM package
      uses: actions/upload-artifact@v4
      with:
        name: driftwave-npm
        path: driftwave-npm.tgz